"use strict";(self.webpackChunkreact53_doc=self.webpackChunkreact53_doc||[]).push([[991],{589:(e,a,s)=>{s.r(a),s.d(a,{data:()=>n});const n={key:"v-784f4fe6",path:"/chart1.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"触发更新",slug:"触发更新",children:[]},{level:2,title:"计算本次更新带来的副作用",slug:"计算本次更新带来的副作用",children:[]},{level:2,title:"执行对应副作用",slug:"执行对应副作用",children:[]},{level:2,title:"执行课程1示例",slug:"执行课程1示例",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"chart1.md",git:{updatedTime:1628649388e3,contributors:[]}}},893:(e,a,s)=>{s.r(a),s.d(a,{default:()=>o});const n=(0,s(252).uE)('<p>第一课，让我们对<code>React</code>工作原理有个大概了解。</p><p><code>React</code>的工作大体分为四部分：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>触发更新 <span class="token operator">-</span><span class="token operator">&gt;</span> 调度更新 <span class="token operator">-</span><span class="token operator">&gt;</span> 计算本次更新带来的副作用 <span class="token operator">-</span><span class="token operator">&gt;</span> 执行对应副作用\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中步骤2不影响我们对整体流程的理解，所以当前我们可以认为<code>React</code>的工作流程包括三步：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>触发更新 <span class="token operator">-</span><span class="token operator">&gt;</span> 计算本次更新带来的副作用 <span class="token operator">-</span><span class="token operator">&gt;</span> 执行对应副作用\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们依次讲解这三步。</p><h2 id="触发更新" tabindex="-1"><a class="header-anchor" href="#触发更新" aria-hidden="true">#</a> 触发更新</h2><p>触发更新的方式很多，包括：</p><ul><li><p>执行<code>ReactDOM.render</code></p></li><li><p>执行<code>this.setState</code>或<code>this.forceUpdate</code></p></li><li><p>执行<code>const [x, setX] = useState()</code>中的<code>setX</code>（后文称该方法为<code>dispatchAction</code>），或<code>useReducer</code>的类似方法</p></li></ul><p>......</p><p>总之，更新流程都是由于调用了<code>触发更新</code>的<code>API</code>引起的。</p><h2 id="计算本次更新带来的副作用" tabindex="-1"><a class="header-anchor" href="#计算本次更新带来的副作用" aria-hidden="true">#</a> 计算本次更新带来的副作用</h2><p>这一步在源码中叫<code>render</code>阶段，原因是组件<code>render</code>方法的执行就在这个阶段。</p><p><code>副作用</code>包括：</p><ul><li><p><code>DOM</code>的增/删/改（更新属性）</p></li><li><p><code>useEffect</code>回调函数执行</p></li></ul><p>......</p><p>总之，<code>render</code>阶段的目的是找到更新会带来的副作用。</p><h2 id="执行对应副作用" tabindex="-1"><a class="header-anchor" href="#执行对应副作用" aria-hidden="true">#</a> 执行对应副作用</h2><p>这一步在源码中叫<code>commit</code>阶段，类似<code>git commit</code>提交代码（这里指将<code>副作用</code>提交给视图）。</p><p>这一步会遍历<code>render</code>阶段找到的<code>副作用</code>并依次执行他们。</p><h2 id="执行课程1示例" tabindex="-1"><a class="header-anchor" href="#执行课程1示例" aria-hidden="true">#</a> 执行课程1示例</h2><p>接下来请你理论结合实际，自己动手感受下这3个阶段的存在。</p><p>运行<code>习题_1</code>，打开控制台，你会发现打印了3条消息：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>开始render阶段，计算本次更新带来的副作用\n开始commit阶段，执行副作用\n副作用：App（函数组件）插入  FiberNode <span class="token punctuation">{</span>tag<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> stateNode<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> elementType<span class="token operator">:</span> ƒ<span class="token punctuation">,</span> type<span class="token operator">:</span> ƒ<span class="token punctuation">,</span> …<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这次更新是调用<code>ReactDOM.render</code>造成的。</p><p>在第三行可以看到包含副作用的是<code>App</code>组件对应的<code>FiberNode</code>（第二课会讲到），执行的操作是：插入。</p><p>所以，我们可以推断：执行<code>ReactDOM.render</code>后触发一次更新，更新使<code>App</code>组件对应的<code>FiberNode</code>产生副作用，该副作用的类型为<strong>插入DOM</strong>。</p><p>具体插入的<code>DOM</code>是什么呢？你可以展开<code>FiberNode.child.stateNode</code>看看。就是首屏渲染的完整<code>DOM</code>树。</p><p>现在试试点击<strong>点我种蘑菇</strong>，会在<code>ul</code>下插入一个<code>li</code>，日志打印如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>开始render阶段，计算本次更新带来的副作用\n开始commit阶段，执行副作用\n副作用：button更新属性  FiberNode <span class="token punctuation">{</span>tag<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> elementType<span class="token operator">:</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> stateNode<span class="token operator">:</span> button<span class="token punctuation">,</span> …<span class="token punctuation">}</span> \n副作用：button更新属性  FiberNode <span class="token punctuation">{</span>tag<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> elementType<span class="token operator">:</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> stateNode<span class="token operator">:</span> button<span class="token punctuation">,</span> …<span class="token punctuation">}</span>\n副作用：li插入  FiberNode <span class="token punctuation">{</span>tag<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> elementType<span class="token operator">:</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> stateNode<span class="token operator">:</span> li<span class="token punctuation">,</span> …<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这次更新是由于调用<code>useState</code>的<code>dispatchAction</code>造成的，会产生3个副作用。</p><details class="custom-container details"><summary>思考题：为什么button会更新属性？</summary><p>2个<code>button</code>之所以会更新属性，是因为绑定在<code>onClick</code>的回调（<code>add</code>与<code>del</code>）在每次<code>render</code>时都是一个全新方法，所以<code>React</code>认为该属性更新了</p></details><p>接下来请你自由发挥，充分感受<code>React</code>的三步更新流程。</p><p>当学习完本节课后，记得做课后习题哦。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>请牢记这三步工作流程：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>触发更新 <span class="token operator">-</span><span class="token operator">&gt;</span> 计算本次更新带来的副作用（render阶段） <span class="token operator">-</span><span class="token operator">&gt;</span> 执行对应副作用（commit阶段）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>React</code>大部分<code>API</code>的调用都发生在<code>render</code>、<code>commit</code>阶段。在后面的课程中当我们讲到某个<code>API</code>的调用流程时，希望你能立刻脑补出他在这三个步骤中的位置。</p><p>记得打开<code>课程1/homework/index.ts</code>做作业哦。</p>',39),o={render:function(e,a){return n}}}}]);