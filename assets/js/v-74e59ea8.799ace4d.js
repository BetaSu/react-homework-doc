"use strict";(self.webpackChunkreact53_doc=self.webpackChunkreact53_doc||[]).push([[793],{839:(e,d,o)=>{o.r(d),o.d(d,{data:()=>c});const c={key:"v-74e59ea8",path:"/chart2.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"执行课程2示例",slug:"执行课程2示例",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"chart2.md",git:{updatedTime:1628830442e3,contributors:[]}}},188:(e,d,o)=>{o.r(d),o.d(d,{default:()=>r});const c=(0,o(252).uE)('<p>上节课我们讲到，<code>render</code>阶段的目的是：计算本次更新带来的副作用。具体是如何办到的呢？答案是：通过虚拟DOM树的比较。</p><p>在<code>React</code>中，<code>虚拟DOM</code>被称为<code>fiberNode</code>（在<code>Vue</code>中被称为<code>VNode</code>）。</p><blockquote><p>后文都会使用<code>fiberNode</code>指代<code>虚拟DOM</code></p></blockquote><p>我们按<code>mount</code>（首次渲染）与<code>update</code>（更新）来看：</p><p><code>mount</code>时的<code>render</code>阶段，<code>React</code>会为每个<code>ReactElement</code>创建对应<code>fiberNode</code>，每个新生成的<code>fiberNode</code>会与已有<code>fiberNode</code>连接形成<code>fiber树</code>。</p><p><code>update</code>时的<code>render</code>阶段，<code>React</code>会将每个<code>ReactElement</code>与其<code>mount</code>时创建的<code>fiberNode</code>进行比较，如果存在差异，这个差异就是本次更新带来的副作用。比较后再创建<code>fiberNode</code>。</p><p>本节我们主要学习<code>fiberNode</code>创建的顺序。了解创建顺序，就能知道组件：</p><ul><li><p><code>render</code>函数执行的顺序</p></li><li><p>生命周期执行的顺序</p></li><li><p><code>Hooks</code>执行的顺序</p></li><li><p>性能优化的顺序</p></li></ul><h2 id="执行课程2示例" tabindex="-1"><a class="header-anchor" href="#执行课程2示例" aria-hidden="true">#</a> 执行课程2示例</h2><p>打开控制台，可以看到<code>render</code>创建对应<code>fiberNode</code>的过程。</p><p>具体来说，这个过程遵循<strong>深度优先遍历</strong>，即：从根节点出发，沿着左子树方向进行纵向遍历，直到找到叶子节点为止。 然后回溯到前一个节点，进行右子树节点的遍历，直到遍历完所有可达节点为止。</p><p>你可以修改下示例（如增加几个函数组件），加深对整个过程的理解。</p><p>展开示例中创建的任意一个<code>fiberNode</code>的数据结构，会发现如下几个字段：</p><ul><li><p>child，连接自己的<code>子fiberNode</code></p></li><li><p>sibling，连接自己<code>兄弟fiberNode</code></p></li><li><p>return，连接自己<code>父fiberNode</code></p></li></ul><p>通过这几个字段，所有<code>fiberNode</code>连接在一起组成<code>fiber树</code>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>render</code>阶段会采用<code>深度优先遍历</code>生成<code>fiber树</code>，并在这个过程中收集副作用。</p><p>记得打开<code>课程2/homework/index.ts</code>做作业哦。</p>',18),r={render:function(e,d){return c}}}}]);