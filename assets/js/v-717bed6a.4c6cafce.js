"use strict";(self.webpackChunkreact53_doc=self.webpackChunkreact53_doc||[]).push([[630],{595:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-717bed6a",path:"/chart3.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"执行课程3示例",slug:"执行课程3示例",children:[]}],filePathRelative:"chart3.md",git:{updatedTime:1628830442e3,contributors:[]}}},926:(n,a,s)=>{s.r(a),s.d(a,{default:()=>e});const p=(0,s(252).uE)('<p>第一节课我们聊到触发更新的几种方式，比如：</p><ul><li><p>执行<code>ReactDOM.render</code></p></li><li><p>执行<code>this.setState</code>或<code>this.forceUpdate</code></p></li><li><p>执行<code>useState</code>中的<code>dispatchAction</code></p></li></ul><p>......</p><p>其中<code>mount</code>时的更新是由于调用<code>ReactDOM.render</code>触发的。本节我们通过<code>useState</code>的<code>dispatchAction</code>举例，来了解<code>React</code>的整体更新流程。</p><p>更新流程大体可分为几步：</p><ol><li><p>某个组件触发更新</p></li><li><p>进入<code>render</code>阶段，开始生成<code>fiber树</code></p></li><li><p>生成过程进行到触发更新的组件时，如果更新导致的状态变化会产生副作用，则标记该副作用</p></li><li><p>进入<code>commit</code>阶段，执行副作用</p></li></ol><p>这几个步骤为我们带来亮点启示：</p><ol><li><code>React</code>并不关心是谁触发了更新</li></ol><p>从以上步骤可以看出，任何一个组件触发更新，都会进入<code>render</code>阶段并生成一棵完整的<code>fiber树</code>。</p><ol start="2"><li>“更新”是一种数据结构</li></ol><p>触发更新的组件与<code>render</code>阶段遍历的其他组件唯一的区别是：触发更新的组件内存在代表“更新”的数据结构。根据该数据结构计算出新状态，新状态再对应副作用。</p><h2 id="执行课程3示例" tabindex="-1"><a class="header-anchor" href="#执行课程3示例" aria-hidden="true">#</a> 执行课程3示例</h2><p>示例包含多个函数组件，其中<code>Parent</code>包含状态<code>num</code>，该状态会作为<code>props</code>传递给<code>Child</code>：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code>\n<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> updateNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">num</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>updateNum<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">{</span>num<span class="token punctuation">,</span> onChange<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>num<span class="token operator">:</span> number<span class="token punctuation">;</span> <span class="token function-variable function">onChange</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">onChange</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>打开控制台，你会看到一行蓝字：</p><blockquote><p>Parent（函数组件或类组件）的useState根据初始state计算出新state： 0</p></blockquote><p><code>num</code>的初始值是0，该值是<code>useState(0)</code>中定义的。</p><p>现在点击示例区域，触发更新。</p><p><code>React</code>发现<code>Parent</code>触发了更新，于是创建代表更新的数据结构<code>Update</code>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//  Parent（函数组件）触发了更新，创建Update：  </span>\n<span class="token punctuation">{</span>\n  action<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token comment">// 其他字段省略...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中<code>action</code>字段代表要更新的状态。</p><p>当<code>render</code>阶段遍历到<code>Parent</code>组件发现该<code>Update</code>，就会基于他计算新的<code>num</code>状态，<code>num</code>的变化导致<code>div更新属性</code>副作用，最终在<code>commit</code>阶段执行副作用。</p><details class="custom-container details"><summary>思考题：Update为什么有个next字段指向自己？</summary><p>其实<code>Update</code>的<code>next</code>字段并不是指向<code>Update</code>自身，而是形成环状链表。</p><p>每次基于<code>Update</code>计算状态时也是遍历整条链表计算最终状态。</p><p>什么情况下会有多个<code>Update</code>呢？有几种情况，这里介绍一种简单的：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在一个组件中连续触发3次更新，就会形成3个<code>Update</code>，他们会形成环状链表</p></details>',23),e={render:function(n,a){return p}}}}]);